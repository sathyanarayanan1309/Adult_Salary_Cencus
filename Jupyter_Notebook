import numpy as np
import pandas as pd
import numpy as np 
import pandas as pd 
import warnings
import matplotlib.pyplot as plt 
%matplotlib inline
import seaborn as sns
import statsmodels.api as sm
import itertools

from pylab import rcParams

from sklearn import metrics
from sklearn import linear_model
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, LinearSVC
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error


df = pd.read_csv('adult.csv')
df.head(5)

df.info()

df.describe

df.isnull().sum()

df_A = df.drop(['workclass','education','marital-status','occupation','relationship','race','sex','country','salary'],axis= 1)

df_A

df.head(2)

#Feature Engineering

df['salary'].value_counts

df['education'].value_counts()

df['workclass'].value_counts()

df['occupation'].value_counts()

for c in df.columns:
    null_values = df[c].isna().sum()
    percentage = (null_values / len(df)) * 100
    print("In {}, mean of null value is: {}".format(c, percentage))
    print("-" * 100)

#Exploratory Data Analysis

sns.barplot(x='sex', y='salary', data=df)

sns.countplot(x = 'salary', hue ='sex', data = df)

sns.countplot(x = 'salary', hue ='education', data = df)

plt.figure(figsize = (15,8))

sns.countplot(x = 'occupation', hue ='education', data = df)

sns.pairplot(df)

#Performing Simple Linear Regression Model
# y = mx + C -----------> Simple linear regression equation
df.info()

df.salary.astype(object)

df.info()

df_A.head(5)



X = df_A.drop('hours-per-week', axis = 1)
y = df['hours-per-week']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30)
print(X_train)
print(X_test)
print(y_train)
print(y_test)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

X = df_A['age']

# 'sm.add_constant' adds the intercept to the model
X = sm.add_constant(X)

# set the dependent variable
y = df_A['hours-per-week']

# building a model with an intercept
# fit() is used to fit the OLS model
SLR_model = sm.OLS(y,X).fit()
print(SLR_model.summary())

